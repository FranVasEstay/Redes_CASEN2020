---
title: "Tabla de medidas"
author: "Ana Karen/Nicolas Montalva"
format: html
editor: visual
---

## Librerías

```{r}

library(igraph)
library(tibble)
library(doParallel)
```

## Carga de redes

```{r}

load("Redes/descent_igrpah.RData")
load("Redes/marriage_igrpah.RData")
load("Redes/dependency_network.RData")
load("Redes/kinship_igrpah.RData")
```

## Reproduciendo tabla de medidas de loop original

### Red matrimonio

```{r, eval=FALSE}

## NO CORRER ###############################################################################
 #  Size and density
    
##Creo que el problema mayor aquí es que no funcionaba procesar la red porque no estaba en el formato que pide la función
    size=vcount(grafos_matri$marriage_net) #Error: object 'grafos_matri' not found ¿Faltará cargar algún objeto?
    ties=ecount(kinship_unet) #Error: object 'kinship_unet' not found
    
    size # network size
    ties # network n of ties
    
    density<-round(edge_density(kinship_unet),2) 
    
    #Components (networks can be composed of multiple components that are not connected to each other)
    components<-components(kinship_unet)
    n_comp<-components$no
    
    #Degree distributions
    #hist(degree(kinship_unet), breaks=10, col="gray")
    
    # compare the degree distributions of different networks (what proportion of nodes has degree = 1, degree = 2, etc)
    #pk=degree.distribution(kinship_net)
    #plot(pk, pch=19, scale()) ### REVISAR !!
    
    # Average path length (path” is typically a shorthand for “geodesic path” or “shortest path”—the fewest number of edges that you would have to go on to get from one node to another)
    paths=distances(kinship_unet, algorithm="unweighted")
    paths
    
    # Diameter
    # option 1 (calculate the average path length while ignoring pairs of nodes that are in different components)
    diameter<-diameter(kinship_unet, unconnected = TRUE, directed = FALSE)
    
    # option 2 (calculate the average path lengths and diameter separately for each component)
    comps=igraph::decompose(kinship_unet)
    comps
    path.list=lapply(comps, function(x) distances(x, algorithm="unweighted")) #make list object with two path length matrices
    avg.paths=round(sapply(path.list, mean),2) #average path length of each component
    diams=sapply(path.list, max) #diameter of each component
    avg.paths
    
    # transitivity (global: “ratio of triangles to connected triples”)
    g.cluster=transitivity(kinship_unet, "global", isolates = "NaN")
    g.cluster
    
    
    #number of ties for marriage undirected
    ties_mar=ecount(marriage_unet)
    
    #number of ties for filiation undirected
    ties_fil=ecount(descent_unet)
    
    # diameter for filiation directed
    diameter_dir <-diameter(descent_net, unconnected = TRUE, directed = TRUE)
    
    #number of isolates for kinship undirected
    V(kinship_unet)$degree <- degree(kinship_unet)  # calculate degree for each node
    isolates <-as.numeric(sum(V(kinship_unet)$degree==0)) # Count nodes with degree 0
    
    table_nets <- tibble(i,size,ties,density,n_comp,diameter,g.cluster,ties_mar,ties_fil,diameter_dir,isolates) #Removí avg.paths por que es una medida por componente no por vivienda.
    #assign(paste0("dyads_",i),table_nets) # export dataset to environment
    #table_nets #FIXME: Este es solo kinship
```

## Red matrimonio (prueba con una vivienda)

```{r}

###b<-marriage_igrpah[[21133]][[2]]
#b<-marriage_igrpah[[21133]][[2]]
a<-dependency_igrpah[[30]][[2]]

size=vcount(a)
size

ties=ecount(a)
ties

density<-round(edge_density(a),2)
density

components<-components(a)
components
n_comp<-components$no
n_comp

paths<-distances(a, algorithm="unweighted")
paths

diameter<-diameter(a, unconnected = TRUE, directed = TRUE)
diameter

transitivity<-round(transitivity(b, "global", isolates = "NaN"),2)
transitivity

# Reciprocidad
    
reciprocity <- round(reciprocity(a),2)

ties_mar=ecount(a)
ties_mar

ties_fil=ecount(a)
ties_fil

degree<-degree(a, mode = "in")

isolates_b <-as.numeric(sum(degree==0))
isolates_b

table_nets <- tibble(size,ties,density,n_comp,diameter,transitivity,
                     isolates_b, reciprocity) #Error: object 'isolates' not found ¿Se supone que es isolates_b? ¿O es el isolates del chunk anterior? ##ahí si carga (me equivoqué yo al colocar el nombre porque el objeto se llama isolates_b y no solo isolates)

table_nets

```

## Tabla red matrimonio

```{r}

## Se crea un vector vacío para almacenar los ids

ids_vector <- c()

## Se recojen los ids 
for (i in 1:length(marriage_igrpah)) {
  ids <- marriage_igrpah[[i]][[1]]
  ids_vector <- c(ids_vector, ids)
}

num_cores <- 4 
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Cargar bibliotecas y funciones necesarias en los clústeres paralelos
clusterEvalQ(cl, {
  library(igraph)
})


results_list_marriage <- foreach(i = 1:length(marriage_igrpah), .combine = 'rbind') %dopar% {
  a <- marriage_igrpah[[i]][[2]]
  id <- ids_vector[i]  # Obtén el ID correspondiente
  
  size <- igraph::vcount(a)  # Usa el prefijo igraph:: para especificar la función
  ties <- igraph::ecount(a)
  density <- round(igraph::edge_density(a),2)
  components <- igraph::components(a)
  n_comp <- components$no
  paths <- igraph::distances(a, algorithm = "unweighted")
  diameter <- igraph::diameter(a, unconnected = TRUE, directed = TRUE)
  #transitivity <- round(transitivity(a, "global", isolates = "NaN"),2)
  #reciprocity <- round(reciprocity(a),2)
  #ties_mar <- igraph::ecount(a)
  #ties_fil <- igraph::ecount(a)
  degree<-degree(a, mode = "in")
  isolates <- as.numeric(sum(degree == 0))
  
  # Almacenar los resultados en un data frame
  data.frame(id, size, ties, density, n_comp, diameter, isolates)
}

# Detén el clúster paralelo
stopCluster(cl)


```

## Tabla red dependency

```{r}

## Se crea un vector vacío para almacenar los ids

ids_vector <- c()

## Se recojen los ids 
for (i in 1:length(dependency_igrpah)) {
  ids <- dependency_igrpah[[i]][[1]]
  ids_vector <- c(ids_vector, ids)
}

num_cores <- 4 
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Cargar bibliotecas y funciones necesarias en los clústeres paralelos
clusterEvalQ(cl, {
  library(igraph)
})


results_list_dependency <- foreach(i = 1:length(dependency_igrpah), .combine = 'rbind') %dopar% {
  a <- dependency_igrpah[[i]][[2]]
  id <- ids_vector[i]  # Obtén el ID correspondiente
  
  size <- igraph::vcount(a)  # Usa el prefijo igraph:: para especificar la función
  ties <- igraph::ecount(a)
  density <- round(igraph::edge_density(a, 2))
  components <- igraph::components(a)
  n_comp <- components$no
  paths <- igraph::distances(a, algorithm = "unweighted")
  diameter <- igraph::diameter(a, unconnected = TRUE, directed = TRUE)
  #transitivity <- round(transitivity(a, "global", isolates = "NaN"),2)
  #reciprocity <- round(reciprocity(a),2)
  #ties_mar <- igraph::ecount(a)
  #ties_fil <- igraph::ecount(a)
  degree<-degree(a, mode = "in")
  isolates <- as.numeric(sum(degree == 0))
  
  # Almacenar los resultados en un data frame
  data.frame(id, size, ties, density, n_comp, diameter, isolates)
}

# Detén el clúster paralelo
stopCluster(cl)
```

## Tabla red descent

```{r}

## Se crea un vector vacío para almacenar los ids

ids_vector <- c()

## Se recojen los ids 
for (i in 1:length(descent_igrpah_)) {
  ids <- descent_igrpah_[[i]][[1]]
  ids_vector <- c(ids_vector, ids)
}

num_cores <- 4 
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Cargar bibliotecas y funciones necesarias en los clústeres paralelos
clusterEvalQ(cl, {
  library(igraph)
})


results_list_descent <- foreach(i = 1:length(descent_igrpah_), .combine = 'rbind') %dopar% {
  a <- descent_igrpah_[[i]][[2]]
  id <- ids_vector[i]  # Obtén el ID correspondiente
  
  size <- igraph::vcount(a)  # Usa el prefijo igraph:: para especificar la función
  ties <- igraph::ecount(a)
  density <- round(igraph::edge_density(a, 2))
  components <- igraph::components(a)
  n_comp <- components$no
  paths <- igraph::distances(a, algorithm = "unweighted")
  diameter <- igraph::diameter(a, unconnected = TRUE, directed = TRUE)
  #transitivity <- round(transitivity(a, "global", isolates = "NaN"),2)
  #reciprocity <- round(reciprocity(a),2)
  #ties_mar <- igraph::ecount(a)
  #ties_fil <- igraph::ecount(a)
  degree<-degree(a, mode = "in")
  isolates <- as.numeric(sum(degree == 0))
  
  # Almacenar los resultados en un data frame
  data.frame(id, size, ties, density, n_comp, diameter, isolates)
}

# Detén el clúster paralelo
stopCluster(cl)
```

## Tabla red kindship

```{r}

## Se crea un vector vacío para almacenar los ids

ids_vector <- c()

## Se recojen los ids 
for (i in 1:length(kinship_igrpah)) {
  ids <- kinship_igrpah[[i]][[1]]
  ids_vector <- c(ids_vector, ids)
}

num_cores <- 4 
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Cargar bibliotecas y funciones necesarias en los clústeres paralelos
clusterEvalQ(cl, {
  library(igraph)
})


results_list_kinship <- foreach(i = 1:length(kinship_igrpah), .combine = 'rbind') %dopar% {
  a <- kinship_igrpah[[i]][[2]]
  id <- ids_vector[i]  # Obtén el ID correspondiente
  
  size <- igraph::vcount(a)  # Usa el prefijo igraph:: para especificar la función
  ties <- igraph::ecount(a)
  density <- round(igraph::edge_density(a, 2))
  components <- igraph::components(a)
  n_comp <- components$no
  paths <- igraph::distances(a, algorithm = "unweighted")
  diameter <- igraph::diameter(a, unconnected = TRUE, directed = TRUE)
  #g.cluster <- igraph::transitivity(a, "global", isolates = "NaN")
  #ties_mar <- igraph::ecount(a)
  #ties_fil <- igraph::ecount(a)
  degree<-degree(a, mode = "in")
  isolates <- as.numeric(sum(degree == 0))
  
  # Almacenar los resultados en un data frame
  data.frame(id, size, ties, density, n_comp, diameter,isolates)
}

# Detén el clúster paralelo
stopCluster(cl)
```

## Guardar resultados en RData

```{r}
tablas_redes <- c("results_list_marriage", "results_list_dependency", "results_list_descent", "results_list_kinship")

save(list=tablas_redes, file = "Redes/tablas_redes.RData")

load("tablas_redes.RData")
```
